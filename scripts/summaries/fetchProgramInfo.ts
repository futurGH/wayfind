import { pickRemap } from "@wayfind/lib/object";
import { sleep } from "@wayfind/lib/util";
import { JSDOM } from "jsdom";
import fs from "node:fs/promises";
import { fetch, FormData } from "undici";

const PROGRAMS_URL_BASE = "https://www.ontariouniversitiesinfo.ca/programs";

async function parseHtmlProgramsComparison(html: Record<string, string>) {
	const universityPrograms: Record<string, Record<string, string>> = {};

	for (const id in html) {
		const doc = new JSDOM(html[id]).window.document;
		const divs = doc.querySelectorAll<HTMLDivElement>("div.multi");

		const parsedProgramInfo: Record<string, string> = {};

		for (const div of divs) {
			let heading = div.querySelector("b")?.textContent;
			const content = div.textContent?.slice(heading?.length).trim();
			if (!heading || !content) continue;

			heading = heading.trim();

			const keyMap = {
				"Grade Range": "gradeRange",
				Prerequisites: "prerequisites",
				"Residence Cost": "residenceCost",
			};
			if (heading in keyMap) parsedProgramInfo[keyMap[heading as never]] = content;
		}

		await sleep(250);

		console.log(`Fetching ${id}`);
		const programPage = await fetch(`${PROGRAMS_URL_BASE}/${id}`).catch(() => null);
		const programPageHtml = await programPage?.text();
		if (!programPageHtml) continue;

		const programPageDoc = new JSDOM(programPageHtml).window.document;

		const overviewDl = programPageDoc.querySelector<HTMLDListElement>("#overview dl");
		if (overviewDl) {
			const parsedDl = parseDlTag(overviewDl);
			Object.assign(
				parsedProgramInfo,
				pickRemap(
					parsedDl,
					["University", "university"],
					["Degree", "degree"],
					["OUAC Program Code", "ouacCode"],
					["Experiential Learning", "experientialLearning"],
					["Notes", "notes"],
				),
			);
		}

		const programName = programPageDoc.querySelector<HTMLHeadingElement>("h1")?.textContent
			?.trim();
		if (programName) parsedProgramInfo.name = programName;

		const programWebsiteUrl = programPageDoc.querySelector<HTMLAnchorElement>("a.program-apply")
			?.href;
		if (programWebsiteUrl) parsedProgramInfo.programWebsiteUrl = programWebsiteUrl;

		console.log(`Fetched ${programName} as ${id} at ${parsedProgramInfo.university}`);

		universityPrograms[id] = parsedProgramInfo;
	}

	return universityPrograms;
}

function parseDlTag(dl: HTMLDListElement) {
	const result: Record<string, string> = {};
	let currentDT: string | undefined;

	for (const node of [...dl.children]) {
		if (node.tagName === "DT") {
			currentDT = node.textContent?.trim() || "";
		} else if (node.tagName === "DD" && currentDT) {
			result[currentDT] = node.textContent?.trim() || "";
		}
	}

	return result;
}

const body = new FormData();
body.set(
	"programs",
	"22,7410,301,872,7628,5069,417,7396,7555,2054,6468,6831,717,7299,7734,2908,6855,7664,7503,4034,7359,7181,7263,7197,2909,2910,6975,3027,3028,7017,7013,7481,7482,7720,7721,7015,7035,7016,7326,7552,7643,4679,264,219,29,2055,7251,7480,7486,4076,4077,7722,7723,7313,718,4476,5255,5,321,7074,701,376,394,6811,918,7372,6586,724,300,159,288,286,276,419,311,7630,7332,7506,7648,1351,254,7636,6435,9,10,2506,6562,7612,4693,575,7409,7040,7586,7770,7315,7717,4066,595,7032,7284,7011,7368,7264,7012,7741,2590,2510,7517,7740,7769,7613,1231,2509,4694,330,320,350,347,659,7587,6823,5374,6845,5375,488,66,7154,422,3029,657,123,336,285,7644,405,68,3030,7155,481,425,428,879,877,6817,658,759,6644,5377,1329,6371,2667,920,5632,6814,999,7151,1028,62,7554,5134,7152,1020,1164,70,1253,660,404,6434,7629,7437,26,455,7030,6991,7718,7443,7446,7719,7298,874,6992,6993,6885,6998,6994,6886,7444,7447,6995,7044,6888,7445,7448,6996,6997,429,677,7400,433,2902,7661,3447,435,7386,4743,937,3410,374,2906,7036,3026,7733,4079,6664,110,6953,691,135,7706,725,2437,4064,743,1025,7497,2911,6856,7707,384,7261,7649,176,578,582,726,324,7399,1249,3031,491,271,3032,5379,72,7156,440,436,662,7645,760,177,7238,1096,6815,1016,7042,7,400,2045,267,7265,7041,4757,682,7053,683,3452,7304,6567,178,585,588,728,326,7498,6972,7599,7615,5256,5888,6954,250,706,7758,17,6821,7759,627,3099,4080,4532,7767,19,7365,7756,4535,7760,21,23,4534,7762,4536,25,4537,7761,24,7109,27,2521,2036,7631,291,303,379,299,296,298,295,11,7418,7079,1275,6846,7103,7198,7104,7199,378,6832,3463,6518,7546,6957,7547,7705,3449,4035,4027,4036,3,6939,7523,179,591,3441,729,329,273,7789,203,1362,510,74,1133,7465,7466,7285,7068,45,41,7467,7394,75,1098,3034,7379,2904,7248,7403,2051,1350,7778,6585,4051,7464,7449,3033,443,664,7397,7779,7033,876,7646,2665,6695,1252,7771,6563,730,1251,2436,1013,1142,383,223,402,2052,1163,707,83,371,6870,6895,6894,7398,6439,6438,6437,6442,6441,6440,6448,6447,6446,6581,3884,6445,6444,6443,6451,6450,6449,6454,6453,6452,1243,127,7545,124,130,1242,1017,1018,6810,6812,7768,3883,6901,4925,4954,7339,7691,5588,4924,712,7338,714,7417,3885,804,812,810,814,808,7728,817,7324,6925,6926,6929,6930,7407,6927,6928,6932,6931,7037,7255,7182,1278,7287,7286,5017,7729,7405,7742,7453,278,7541,7029,7542,395,7183,7200,289,7780,2044,536,719,6727,7543,7067,7508,6463,2913,7289,6858,7297,7288,7708,680,7616,6949,7676,7677,7702,7237,7701,7650,7493,681,6464,6487,7621,1368,1369,7651,7703,1415,7602,3466,7273,439,6965,6465,731,7678,665,6753,85,5380,2037,1364,5344,113,6933,7184,7680,6857,7773,7681,7201,7185,451,2915,2039,4038,2945,6960,7665,7361,6777,7785,6983,255,180,6568,594,596,7637,732,331,7668,7669,313,914,52,4017,98,1265,4680,7309,54,55,56,57,60,58,4527,59,7310,835,7311,709,6509,7544,61,1266,4759,7341,1246,137,182,339,441,929,7080,6859,1262,6427,4039,4028,3866,7499,6560,2916,2917,7322,6878,7709,7483,5345,7019,7020,7021,6951,185,7670,7782,7671,1247,3036,2919,7551,7333,3882,7652,3035,6466,7186,6569,341,334,7269,7492,1226,318,7342,6875,6876,7153,666,6848,7433,553,7524,3423,2944,7081,7384,7700,7515,7343,361,4416,363,1172,7727,7250,6582,7564,7374,7123,7622,6834,1173,734,7196,7206,7207,7556,115,7411,4029,7387,7360,7632,6955,7157,452,454,5135,7484,7662,7772,2534,1416,7784,7783,7495,1339,7391,7390,4059,7593,3040,6872,3039,7392,4184,850,936,277,7458,7459,551,7393,7345,946,6835,6860,7072,7710,2920,7346,7451,6521,6564,251,6522,6605,2941,7389,6861,7589,7711,7588,7347,314,6566,6824,401,7348,735,7082,1115,6877,365,7349,2921,116,7699,4042,5330,7512,3041,6520,456,7513,7514,335,7158,7159,7350,1116,6276,6577,4736,7549,5586,5587,7560,6969,7743,736,6467,6836,7083,7318,7600,7618,1360,262,838,317,7358,263,607,7438,6308,7009,2002,292,6979,7362,1091,1119,7272,6837,42,5351,2924,7084,7266,6862,7202,7105,1261,4043,4030,6429,6477,7712,4415,173,2938,2939,315,7674,7388,307,309,1095,104,103,105,1267,1094,5298,106,142,2511,406,3051,3050,7377,7660,6936,737,7624,359,1107,64,63,6430,143,4738,7607,7108,7605,7606,608,486,7505,6493,2049,1260,6973,7603,7614,6471,738,6415,6828,3440,2929,944,7714,7352,846,2928,7070,6863,6977,6565,7663,6470,6469,67,6570,7672,186,7673,742,6871,2930,3042,7302,7303,6825,69,71,4625,2041,7283,6943,6944,6942,7787,7522,7653,6472,7236,7413,7654,1241,549,3550,6980,7460,7353,744,1279,6818,28,7270,6869,7187,2927,6974,209,7617,7713,7188,745,7380,6514,6515,6516,6517,2931,442,7189,6958,692,6952,746,73,6506,7485,226,1082,322,2543,174,12,6561,7471,837,840,13,6588,1121,6038,1250,294,1272,1227,308,6830,2040,5353,4045,873,6853,6883,6852,7559,7292,7293,7007,7294,7271,7065,7028,7000,7001,7487,7002,7306,7003,7295,7296,7051,7004,7005,7052,7006,5491,1359,1276,6838,7355,1259,385,7526,7655,7751,1248,1104,228,410,7085,7291,7540,381,261,391,375,283,1114,4597,793,256,7638,7601,7656,7260,7633,6473,188,7240,3045,3046,3043,7160,78,1365,7010,6873,7203,7164,1948,107,150,467,668,399,469,372,1273,2056,1165,7534,397,500,6589,269,7642,257,190,6572,598,601,7640,2340,747,337,6813,7639,7679,340,4078,6590,306,756,7246,6519,4211,7267,6880,6865,7715,7025,7026,265,7611,761,7043,7402,152,352,8,7500,7076,748,140,749,191,6839,7501,7696,711,170,430,79,7086,168,338,7095,7096,7097,7098,7099,7100,7101,7102,7692,327,4047,685,1140,332,46,566,1102,146,172,1132,7034,6592,7507,7657,343,1109,7775,252,108,7435,7489,740,260,7659,487,20,266,847,935,713,620,622,617,751,752,750,7625,139,7620,7627,7626,6594,6416,6417,753,754,90,7165,7412,7634,839,6595,240,763,764,765,2290,7461,7658,2932,7502,6840,7087,7488,7046,6866,6889,7106,7204,6970,6968,6896,7666,4973,6596,6475,1105,14,7752,236,7518,412,503,282,109,3047,7161,6795,7162,669,7647,6597,367,6940,6941,7404,7510,7509,6841,4058,118,7190,7521,4048,4031,6431,5617,7667,6598,2933,7045,6867,6893,7066,7591,7590,720,119,7774,6474,5052,7525,7553,2043,7320,7316,7321,7319,6842,721,386,7415,7416,7047,7323,6874,6881,6890,6891,6892,7107,5358,7776,495,2935,1090,7249,120,2934,4049,4032,7191,5615,7596,7777,7442,5383,499,7693,3049,1125,7682,3048,4052,7192,6819,7595,7753,6902,7592,7594,6897,6898,7027,6599,7193,739,7205,3465,82,84,87,81,89,7623,2419,7472,755,5308,7786,3546,7301,18,297,7088,6971,1342,194,715,913,349,6510,94,3551,1117,6587,414,95,7558,6600,93,7739,6476,7089,7090,7254,6231,319,7337,7336,408,377,302,117,396,1108,382,7557,892,220,154,7738,96,852,762,446,5333,878,2042,6037,6036,6601,5360,6843,2937,121,2936,7195,7268,6882,6868,7537,7538,6433,4050,4033,6482,7716,722,6602,258,602,7641,2664,354,930,7548,15,7781,5722,826,853,7163,6982,7252,7325,7536,7744,7539,272,7562,4074,4075,7598,7597,7698,345,1268,6049,1269,6050,7414,7056,7635,7604,7092,357,686,1021,1106,940,2535,671,690,723,1332,2050,7468,7550,766,6937,6268,51,418,7094,687,4040,564,688,6603,6945,355,6426,6604,344,6035,6844,122,6987,7520,3742,5386",
);
body.set("compare", "all");
const htmlData = await fetch(`${PROGRAMS_URL_BASE}/comparisons`, { method: "POST", body }).then((
	data,
) => data.json());

const parsed = await parseHtmlProgramsComparison(htmlData as Record<string, string>);

fs.mkdir("./data/programs", { recursive: true });

for (const [id, data] of Object.entries(parsed)) {
	await fs.writeFile(`./data/programs/${id}.program.json`, JSON.stringify(data, null, "\t"));
}
